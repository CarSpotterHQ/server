name: Docker Deploy with Secrets

on:
  push:
    branches:
      - main  # main 브랜치로 push될 때 실행

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest .
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }} .

      # 4. Docker 이미지 푸시
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}

      # 5. SSH를 사용하여 EC2에 배포
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}                # EC2의 퍼블릭 IP
          username: ${{ secrets.REMOTE_USER }}         # EC2 SSH 사용자 이름
          key: ${{ secrets.AWS_PRIVACY_KEY }}          # EC2 SSH PEM 키
          port: ${{ secrets.REMOTE_SSH_PORT }}         # SSH 포트 (기본 22)
          script: |
            # 1. Spring 설정 파일 복원
            echo "${{ secrets.SPRING_PROPERTIES_BASE64 }}" | base64 --decode > ./application-prod.yml

            # 2. 기존 컨테이너 중지 및 제거
            # 1. 기존 컨테이너가 있는지 확인하고, 있으면 중지 및 제거
            if sudo docker ps -a --filter "name=backend" --format '{{.Names}}' | grep -q "^backend$"; then
            # 2. 기존 컨테이너 중지
            sudo docker stop backend
            # 3. 기존 컨테이너 제거
            sudo docker rm backend
            fi
            
            # 3. Docker 이미지 업데이트
            sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            
            # 4. 컨테이너 실행 (Spring 설정 파일 포함)
            sudo docker run -d -p 8080:8080 \
              -v $PWD/application-prod.yml:/app/config/application-prod.yml \
              -e SPRING_PROFILES_ACTIVE=prod \
              --name backend --restart on-failure \
              "${{ secrets.DOCKERHUB_USERNAME }}/backend:latest"

